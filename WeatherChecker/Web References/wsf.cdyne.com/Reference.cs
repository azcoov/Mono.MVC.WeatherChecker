// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace WeatherChecker.wsf.cdyne.com {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="WeatherSoap", Namespace="http://ws.cdyne.com/WeatherWS/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Weather : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetWeatherInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCityForecastByZIPOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCityWeatherByZIPOperationCompleted;
        
        public Weather() {
            this.Url = "http://wsf.cdyne.com/WeatherWS/Weather.asmx";
        }
        
        public Weather(string url) {
            this.Url = url;
        }
        
        public event GetWeatherInformationCompletedEventHandler GetWeatherInformationCompleted;
        
        public event GetCityForecastByZIPCompletedEventHandler GetCityForecastByZIPCompleted;
        
        public event GetCityWeatherByZIPCompletedEventHandler GetCityWeatherByZIPCompleted;
        
        /// <remarks>
///Gets Information for each WeatherID
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/WeatherWS/GetWeatherInformation", RequestNamespace="http://ws.cdyne.com/WeatherWS/", ResponseNamespace="http://ws.cdyne.com/WeatherWS/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayItem(IsNullable=false)]
        public WeatherDescription[] GetWeatherInformation() {
            object[] results = this.Invoke("GetWeatherInformation", new object[0]);
            return ((WeatherDescription[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetWeatherInformation(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWeatherInformation", new object[0], callback, asyncState);
        }
        
        public WeatherDescription[] EndGetWeatherInformation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WeatherDescription[])(results[0]));
        }
        
        public void GetWeatherInformationAsync() {
            this.GetWeatherInformationAsync(null);
        }
        
        public void GetWeatherInformationAsync(object userState) {
            if ((this.GetWeatherInformationOperationCompleted == null)) {
                this.GetWeatherInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWeatherInformationCompleted);
            }
            this.InvokeAsync("GetWeatherInformation", new object[0], this.GetWeatherInformationOperationCompleted, userState);
        }
        
        private void OnGetWeatherInformationCompleted(object arg) {
            if ((this.GetWeatherInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWeatherInformationCompleted(this, new GetWeatherInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Allows you to get your City Forecast Over the Next 7 Days, which is updated hourly. U.S. Only
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/WeatherWS/GetCityForecastByZIP", RequestNamespace="http://ws.cdyne.com/WeatherWS/", ResponseNamespace="http://ws.cdyne.com/WeatherWS/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public ForecastReturn GetCityForecastByZIP(string ZIP) {
            object[] results = this.Invoke("GetCityForecastByZIP", new object[] {
                        ZIP});
            return ((ForecastReturn)(results[0]));
        }
        
        public System.IAsyncResult BeginGetCityForecastByZIP(string ZIP, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCityForecastByZIP", new object[] {
                        ZIP}, callback, asyncState);
        }
        
        public ForecastReturn EndGetCityForecastByZIP(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ForecastReturn)(results[0]));
        }
        
        public void GetCityForecastByZIPAsync(string ZIP) {
            this.GetCityForecastByZIPAsync(ZIP, null);
        }
        
        public void GetCityForecastByZIPAsync(string ZIP, object userState) {
            if ((this.GetCityForecastByZIPOperationCompleted == null)) {
                this.GetCityForecastByZIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCityForecastByZIPCompleted);
            }
            this.InvokeAsync("GetCityForecastByZIP", new object[] {
                        ZIP}, this.GetCityForecastByZIPOperationCompleted, userState);
        }
        
        private void OnGetCityForecastByZIPCompleted(object arg) {
            if ((this.GetCityForecastByZIPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCityForecastByZIPCompleted(this, new GetCityForecastByZIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Allows you to get your City's Weather, which is updated hourly. U.S. Only
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/WeatherWS/GetCityWeatherByZIP", RequestNamespace="http://ws.cdyne.com/WeatherWS/", ResponseNamespace="http://ws.cdyne.com/WeatherWS/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public WeatherReturn GetCityWeatherByZIP(string ZIP) {
            object[] results = this.Invoke("GetCityWeatherByZIP", new object[] {
                        ZIP});
            return ((WeatherReturn)(results[0]));
        }
        
        public System.IAsyncResult BeginGetCityWeatherByZIP(string ZIP, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCityWeatherByZIP", new object[] {
                        ZIP}, callback, asyncState);
        }
        
        public WeatherReturn EndGetCityWeatherByZIP(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WeatherReturn)(results[0]));
        }
        
        public void GetCityWeatherByZIPAsync(string ZIP) {
            this.GetCityWeatherByZIPAsync(ZIP, null);
        }
        
        public void GetCityWeatherByZIPAsync(string ZIP, object userState) {
            if ((this.GetCityWeatherByZIPOperationCompleted == null)) {
                this.GetCityWeatherByZIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCityWeatherByZIPCompleted);
            }
            this.InvokeAsync("GetCityWeatherByZIP", new object[] {
                        ZIP}, this.GetCityWeatherByZIPOperationCompleted, userState);
        }
        
        private void OnGetCityWeatherByZIPCompleted(object arg) {
            if ((this.GetCityWeatherByZIPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCityWeatherByZIPCompleted(this, new GetCityWeatherByZIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/WeatherWS/")]
    public partial class WeatherDescription {
        
        /// <remarks/>
        public short WeatherID;
        
        /// <remarks/>
        public string Description;
        
        /// <remarks/>
        public string PictureURL;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/WeatherWS/")]
    public partial class ForecastReturn {
        
        /// <remarks/>
        public bool Success;
        
        /// <remarks/>
        public string ResponseText;
        
        /// <remarks/>
        public string State;
        
        /// <remarks/>
        public string City;
        
        /// <remarks/>
        public string WeatherStationCity;
        
        /// <remarks/>
        public Forecast[] ForecastResult;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/WeatherWS/")]
    public partial class Forecast {
        
        /// <remarks/>
        public System.DateTime Date;
        
        /// <remarks/>
        public short WeatherID;
        
        /// <remarks/>
        public string Desciption;
        
        /// <remarks/>
        public temp Temperatures;
        
        /// <remarks/>
        public POP ProbabilityOfPrecipiation;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/WeatherWS/")]
    public partial class temp {
        
        /// <remarks/>
        public string MorningLow;
        
        /// <remarks/>
        public string DaytimeHigh;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/WeatherWS/")]
    public partial class POP {
        
        /// <remarks/>
        public string Nighttime;
        
        /// <remarks/>
        public string Daytime;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/WeatherWS/")]
    public partial class WeatherReturn {
        
        /// <remarks/>
        public bool Success;
        
        /// <remarks/>
        public string ResponseText;
        
        /// <remarks/>
        public string State;
        
        /// <remarks/>
        public string City;
        
        /// <remarks/>
        public string WeatherStationCity;
        
        /// <remarks/>
        public short WeatherID;
        
        /// <remarks/>
        public string Description;
        
        /// <remarks/>
        public string Temperature;
        
        /// <remarks/>
        public string RelativeHumidity;
        
        /// <remarks/>
        public string Wind;
        
        /// <remarks/>
        public string Pressure;
        
        /// <remarks/>
        public string Visibility;
        
        /// <remarks/>
        public string WindChill;
        
        /// <remarks/>
        public string Remarks;
    }
    
    public partial class GetWeatherInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWeatherInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WeatherDescription[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WeatherDescription[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetWeatherInformationCompletedEventHandler(object sender, GetWeatherInformationCompletedEventArgs args);
    
    public partial class GetCityForecastByZIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCityForecastByZIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ForecastReturn Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ForecastReturn)(this.results[0]));
            }
        }
    }
    
    public delegate void GetCityForecastByZIPCompletedEventHandler(object sender, GetCityForecastByZIPCompletedEventArgs args);
    
    public partial class GetCityWeatherByZIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCityWeatherByZIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WeatherReturn Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WeatherReturn)(this.results[0]));
            }
        }
    }
    
    public delegate void GetCityWeatherByZIPCompletedEventHandler(object sender, GetCityWeatherByZIPCompletedEventArgs args);
}
